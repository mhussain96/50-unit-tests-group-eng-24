May not be the perfect solution:
	// takes a string change any text into lowercase then uppercase on repeat, ignoring spaces
        public string TextToSpongeBobMeme(string str) {
            bool even = true;
            string str1 = "";
            foreach (var elem in str) {
                if (even && elem != ' ') {
                    str1 += elem.ToString().ToLower();
                    even = false;
                } else if (!even && elem != ' ') {
                    str1 += elem.ToString().ToUpper();
                    even = true;
                } else {
                    str1 += elem;
                }
            }
            return str1;
        }

        // takes 3 words, return a string removing the middle word leaving one space
        public string RemoveMiddleWord(string str) {
            string[] str1 = str.Split(' ');
            return str1[0] + " " + str1[2];
        }

        // takes an array of ints, return the sum of the array NOT INCLUDING THE LARGEST NUMBER
        public int SumIgnoringMax(int[] intArr) {
            int max = 0;
            int sum = 0;
            foreach (var elem in intArr) {
                if (elem > max) max = elem;
                sum += elem;
            }
            return sum - max;
        }

        // takes 2 ints which decides how high the pyramid goes
        /*example for 5, 9

             *
            ***
           *****
          *******
         *********
     
        */
        public char[,] Pyramid(int height, int width) {
            char[,] pyramid = new char[height, width];
            //some code to make it work, good luck 
            bool b = false;
            int count = 0;
            for (int i = 0; i < pyramid.GetLength(0); i++)
            {
                for (int j = 0; j < pyramid.GetLength(1); j++)
                {
                    if ((pyramid.GetLength(1) / 2 - i) == j || b)
                    {
                        b = true;
                        pyramid[i, j] = '*';
                        count++;
                        if (count == 2 * i + 1)
                        {
                            b = false;
                            count = 0;
                        }
                    }
                    else
                    {
                        pyramid[i, j] = ' ';
                    }
                }
            }
            return pyramid;
        }

	// takes 2 int arrays, returns teh elements from the first array that aren't in the 
        // second array
        public int[] Different(int[] arr1, int[] arr2) {

            return new int[] { };
        }
